// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace LinkedInSalesToolGUI.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Programowanie\Praca\Praktyki Hart Sp. z o.o\Projects\LinkedInLib\LinkedInSalesToolGUI\LinkedInSalesToolGUI\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Programowanie\Praca\Praktyki Hart Sp. z o.o\Projects\LinkedInLib\LinkedInSalesToolGUI\LinkedInSalesToolGUI\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Programowanie\Praca\Praktyki Hart Sp. z o.o\Projects\LinkedInLib\LinkedInSalesToolGUI\LinkedInSalesToolGUI\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Programowanie\Praca\Praktyki Hart Sp. z o.o\Projects\LinkedInLib\LinkedInSalesToolGUI\LinkedInSalesToolGUI\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Programowanie\Praca\Praktyki Hart Sp. z o.o\Projects\LinkedInLib\LinkedInSalesToolGUI\LinkedInSalesToolGUI\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Programowanie\Praca\Praktyki Hart Sp. z o.o\Projects\LinkedInLib\LinkedInSalesToolGUI\LinkedInSalesToolGUI\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Programowanie\Praca\Praktyki Hart Sp. z o.o\Projects\LinkedInLib\LinkedInSalesToolGUI\LinkedInSalesToolGUI\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Programowanie\Praca\Praktyki Hart Sp. z o.o\Projects\LinkedInLib\LinkedInSalesToolGUI\LinkedInSalesToolGUI\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Programowanie\Praca\Praktyki Hart Sp. z o.o\Projects\LinkedInLib\LinkedInSalesToolGUI\LinkedInSalesToolGUI\_Imports.razor"
using LinkedInSalesToolGUI;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Programowanie\Praca\Praktyki Hart Sp. z o.o\Projects\LinkedInLib\LinkedInSalesToolGUI\LinkedInSalesToolGUI\_Imports.razor"
using LinkedInSalesToolGUI.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Programowanie\Praca\Praktyki Hart Sp. z o.o\Projects\LinkedInLib\LinkedInSalesToolGUI\LinkedInSalesToolGUI\Pages\Settings.razor"
using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Programowanie\Praca\Praktyki Hart Sp. z o.o\Projects\LinkedInLib\LinkedInSalesToolGUI\LinkedInSalesToolGUI\Pages\Settings.razor"
using LinkedInSalesToolGUI.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Programowanie\Praca\Praktyki Hart Sp. z o.o\Projects\LinkedInLib\LinkedInSalesToolGUI\LinkedInSalesToolGUI\Pages\Settings.razor"
using LinkedInLib;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/settings")]
    public partial class Settings : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 92 "C:\Programowanie\Praca\Praktyki Hart Sp. z o.o\Projects\LinkedInLib\LinkedInSalesToolGUI\LinkedInSalesToolGUI\Pages\Settings.razor"
       
    string[] currentInputValues = new string[4];
    DateTime[] dateTimes = new DateTime[2];
    int[] timeSpans = new int[3];
    string[] databaseConnection = new string[5];
    readonly List<string> messageVariableNames = new List<string>() { "Initial Message", "Followup Message", "Special Account Initial Message", "Special Account Followup Message" };
    readonly List<string> timeVariableNames = new List<string>() { "Tool start time", "Tool stop time" };
    readonly List<string> daysVariableNames = new List<string>() { "Time before Initial message", "Time before Followup message", "Time after Followup message" };
    readonly List<string> databaseVariableNames = new List<string>() { "server", "database", "port", "username", "password" };
    List<string> userStatusesStrings = new List<string>();
    public bool checkingDatabaseConnection = false;
    public static bool databaseConnectionValid = false;

    protected override async Task OnInitializedAsync()
    {
        Index index = new Index();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            userStatusesStrings = await dbService.GetUserStatusesStrings();
            await ReadEverything();
            StateHasChanged();
            await CheckDatabaseInfo();

        }

    }

    private async Task SaveDatabaseInfo(int id)
    {
        await BrowserStorage.SetAsync(databaseVariableNames[id], databaseConnection[id]);
    }

    private async Task SaveTimeWithDays(int id)
    {
        await BrowserStorage.SetAsync(daysVariableNames[id], timeSpans[id]);
    }

    private async Task SaveMessage(int id)
    {
        await BrowserStorage.SetAsync(messageVariableNames[id], currentInputValues[id]);
    }

    private async Task SaveTime(int id)
    {
        await BrowserStorage.SetAsync(timeVariableNames[id], dateTimes[id]);
    }

    private async Task ReadTimeWithDays(int id)
    {

        //var resultTime = await BrowserStorage.GetAsync<DateTime>(timeVariableNames[id]);
        //dateTimes[id] = result.Success ? result.Value : new DateTime(2);
        var result = await BrowserStorage.GetAsync<int>(daysVariableNames[id]);
        timeSpans[id] = result.Success ? result.Value : 0;

    }

    private async Task ReadMessage(int id)
    {
        var result = await BrowserStorage.GetAsync<string>(messageVariableNames[id]);
        currentInputValues[id] = result.Success ? result.Value : "";
    }

    private async Task ReadTime(int id)
    {
        var result = await BrowserStorage.GetAsync<DateTime>(timeVariableNames[id]);
        dateTimes[id] = result.Success ? result.Value : new DateTime(2);
    }

    private async Task ReadDatabase(int id)
    {
        var result = await BrowserStorage.GetAsync<string>(databaseVariableNames[id]);
        databaseConnection[id] = result.Success ? result.Value : "";
    }

    private async Task SaveEverything()
    {
        int j = 0;
        foreach (var value in currentInputValues)
        {
            await SaveMessage(j);
            j++;
        }
        j = 0;
        foreach (var value in dateTimes)
        {
            await SaveTime(j);
            j++;
        }
        j = 0;
        foreach (var value in timeSpans)
        {
            await SaveTimeWithDays(j);
            j++;
        }
        j = 0;
        foreach (var value in databaseVariableNames)
        {
            await SaveDatabaseInfo(j);
            j++;
        }
    }

    private async Task ReadEverything()
    {
        int j = 0;
        foreach (var value in currentInputValues)
        {
            await ReadMessage(j);
            j++;
        }
        j = 0;
        foreach (var value in dateTimes)
        {
            await ReadTime(j);
            j++;
        }
        j = 0;
        foreach (var value in timeSpans)
        {
            await ReadTimeWithDays(j);
            j++;
        }
        j = 0;
        foreach (var value in databaseVariableNames)
        {
            await ReadDatabase(j);
            j++;
        }
    }

    private async Task DeleteMessage(int id)
    {
        await BrowserStorage.DeleteAsync(messageVariableNames[id]);
    }

    private async Task CheckDatabaseInfo()
    {
        checkingDatabaseConnection = true;
        StateHasChanged();
        if (await dbService.CheckDatabaseConnection(databaseConnection[0], databaseConnection[1], databaseConnection[2], databaseConnection[3], databaseConnection[4]))
        {
            databaseConnectionValid = true;
            Startup.databaseManagerSet = true;
            Startup.databaseManager = new DatabaseManager(databaseConnection[0], databaseConnection[1], databaseConnection[2], databaseConnection[3], databaseConnection[4]);

        }
        else
        {
            databaseConnectionValid = false;
            Startup.databaseManagerSet = false;
        }
        checkingDatabaseConnection = false;
        StateHasChanged();
    }

    private async Task UserStatusSelected(ChangeEventArgs e)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to remove {e.Value.ToString()} from user statuses?"); // Confirm
        if (confirmed && await dbService.RemoveUserStatus(userStatusesStrings[Convert.ToInt32(e.Value.ToString())])) userStatusesStrings = await dbService.GetUserStatusesStrings();
        StateHasChanged();
    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JsRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ProtectedLocalStorage BrowserStorage { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private DatabaseService dbService { get; set; }
    }
}
#pragma warning restore 1591
